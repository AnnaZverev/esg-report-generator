import streamlit as st
import requests
import time
import re
import pandas as pd
import PyPDF2
import google.generativeai as genai
from io import BytesIO
import os


def extract_metrics_from_excel(uploaded_excel_file):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ Excel-—Ñ–∞–π–ª–∞."""
    try:
        df_env = pd.read_excel(uploaded_excel_file, sheet_name='Environmental', header=None)
        
        def get_metric(df, metric_name, year_column_index=10):
            try:
                row_index = df[df[0].str.contains(metric_name, na=False)].index[0]
                value = df.iloc[row_index, year_column_index]
                return f"{value:.3f}"
            except (IndexError, TypeError):
                return "–Ω/–¥"

        quantitative_data = {
            "–í—ã–±—Ä–æ—Å—ã Scope 1 (–º–ª–Ω —Ç CO2-—ç–∫–≤.)": get_metric(df_env, "Direct (Scope 1) GHG emissions"),
            "–í—ã–±—Ä–æ—Å—ã Scope 2 (–º–ª–Ω —Ç CO2-—ç–∫–≤.)": get_metric(df_env, "Indirect (Scope 2) GHG emissions"),
            "–û–±—â–∏–π –∑–∞–±–æ—Ä –≤–æ–¥—ã (–º–ª–Ω –º3)": get_metric(df_env, "Total water withdrawal")
        }
        return quantitative_data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞: {e}")
        return None

def extract_data_from_pdf(uploaded_pdf_file, gemini_api_key, excel_provided):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ PDF, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ 11 —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ä–∞—Å–∫—Ä—ã—Ç–∏—è—Ö TCFD.
    –ï—Å–ª–∏ Excel –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    """
    try:
        genai.configure(api_key=gemini_api_key)
        pdf_reader = PyPDF2.PdfReader(uploaded_pdf_file)
        pdf_text = "".join(page.extract_text() for page in pdf_reader.pages)
        model = genai.GenerativeModel('gemini-1.5-pro-latest')

        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –ø–æ 11 —Ä–∞—Å–∫—Ä—ã—Ç–∏—è–º TCFD ---
        prompts_en_tcfd = {
            # Governance (2 disclosures)
            "Governance a) Board's oversight": "Describe the board‚Äôs oversight of climate-related risks and opportunities.",
            "Governance b) Management's role": "Describe management‚Äôs role in assessing and managing climate-related risks and opportunities.",
            
            # Strategy (3 disclosures)
            "Strategy a) Identified risks and opportunities": "Describe the climate-related risks and opportunities the organization has identified over the short, medium, and long term.",
            "Strategy b) Impact on organization": "Describe the impact of climate-related risks and opportunities on the organization‚Äôs businesses, strategy, and financial planning.",
            "Strategy c) Resilience of strategy": "Describe the resilience of the organization‚Äôs strategy, taking into consideration different climate-related scenarios, including a 2¬∞C or lower scenario.",
            
            # Risk Management (3 disclosures)
            "Risk Management a) Risk identification processes": "Describe the organization‚Äôs processes for identifying and assessing climate-related risks.",
            "Risk Management b) Risk management processes": "Describe the organization‚Äôs processes for managing climate-related risks.",
            "Risk Management c) Integration into overall risk management": "Describe how processes for identifying, assessing, and managing climate-related risks are integrated into the organization‚Äôs overall risk management.",
            
            # Metrics and Targets (3 disclosures)
            "Metrics and Targets a) Metrics used": "Disclose the metrics used by the organization to assess climate-related risks and opportunities.",
            "Metrics and Targets b) GHG Emissions": "Disclose Scope 1, Scope 2, and, if appropriate, Scope 3 greenhouse gas (GHG) emissions, and the related risks.",
            "Metrics and Targets c) Targets used": "Describe the targets used by the organization to manage climate-related risks and opportunities and performance against targets."
        }
        
        # –ï—Å–ª–∏ Excel –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –º—ã –≤—Å–µ –µ—â–µ –º–æ–∂–µ–º –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ —Ü–∏—Ñ—Ä—ã
        if not excel_provided:
            prompts_en_tcfd['Quantitative Data (if available)'] = (
                "Find the following key metrics for the most recent reporting year in the text. "
                "Provide only the numerical value. If a metric is not found, return 'Not available'.\n"
                "- Scope 1 GHG Emissions (in million tCO2e):\n"
                "- Scope 2 GHG Emissions (in million tCO2e):\n"
            )

        extracted_data = {}
        status_placeholder = st.empty()
        total_prompts = len(prompts_en_tcfd)
        
        for i, (section, prompt) in enumerate(prompts_en_tcfd.items()):
            status_placeholder.info(f"ü§ñ –ê–Ω–∞–ª–∏–∑ PDF: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è '{section}' ({i+1}/{total_prompts})...")
            response = model.generate_content(
                "You are a professional ESG analyst. Your task is to analyze the following sustainability report text "
                "and provide a clear, structured summary in ENGLISH based on the user's request. Focus only on the information relevant to the specific request.\n\n"
                f"REQUEST: {prompt}\n\n"
                f"SOURCE TEXT (in Russian):\n{pdf_text}"
            )
            extracted_data[section] = response.text
        
        status_placeholder.success("‚úÖ –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ PDF –ø–æ 11 —Ä–∞—Å–∫—Ä—ã—Ç–∏—è–º TCFD –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return extracted_data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Gemini API: {e}")
        return {}

def build_gamma_prompt(company_name, reporting_year, quantitative_data, narrative_data):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π, –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Gamma,
    –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    """
    
    # --- –•–µ–ª–ø–µ—Ä-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö ---
    def process_disclosure(disclosure_key, default_text="Information not disclosed in the source report."):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—Ä–∞–∑—É."""
        content = narrative_data.get(disclosure_key, "").strip()
        # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã –æ –Ω–µ–Ω–∞—Ö–æ–¥–∫–µ
        if not content or "not found" in content.lower() or "not provide" in content.lower():
            return default_text
        return content

    # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Å–µ—Ö 11 —Ä–∞—Å–∫—Ä—ã—Ç–∏–π —Å –ø–æ–º–æ—â—å—é —Ö–µ–ª–ø–µ—Ä–∞ ---
    gov_a = process_disclosure("Governance a) Board's oversight")
    gov_b = process_disclosure("Governance b) Management's role")
    
    strat_a = process_disclosure("Strategy a) Identified risks and opportunities")
    strat_b = process_disclosure("Strategy b) Impact on organization")
    strat_c = process_disclosure("Strategy c) Resilience of strategy")

    risk_a = process_disclosure("Risk Management a) Risk identification processes")
    risk_b = process_disclosure("Risk Management b) Risk management processes")
    risk_c = process_disclosure("Risk Management c) Integration into overall risk management")

    metrics_a = process_disclosure("Metrics and Targets a) Metrics used")
    metrics_b = process_disclosure("Metrics and Targets b) GHG Emissions") # –≠—Ç–æ—Ç –ø—É–Ω–∫—Ç –º—ã –¥–æ–ø–æ–ª–Ω–∏–º —Ü–∏—Ñ—Ä–∞–º–∏
    metrics_c = process_disclosure("Metrics and Targets c) Targets used")

    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ ---
    def format_metric(label, value, unit):
        if value and str(value).lower() != "not available":
            return f"- **{label}:** {value} {unit}"
        return f"- **{label}:** Not available"

    metrics_text = "\n".join([
        format_metric("Scope 1 GHG Emissions", quantitative_data.get('Scope 1 GHG Emissions'), "million tCO2e"),
        format_metric("Scope 2 GHG Emissions", quantitative_data.get('Scope 2 GHG Emissions'), "million tCO2e"),
    ])

    # --- –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ ---
    
    final_prompt = f"""
# TASK: Create a professional TCFD Report for {company_name}, {reporting_year}.

**ROLE:** You are an expert ESG analyst from a top-tier consulting firm. Your task is to synthesize the provided raw data points into a polished, investor-grade report that follows the TCFD framework.

**IMPORTANT INSTRUCTION:** If a data point is marked as 'Information not disclosed...', you must explicitly and professionally state this in the final report. DO NOT ignore missing data. Frame it as a finding of your analysis.

---
---

# TCFD Report: {company_name} ({reporting_year})

---
## 1. Governance
*Disclosing the organization‚Äôs governance around climate-related risks and opportunities.*

**a) Board‚Äôs Oversight:**
{gov_a}

**b) Management‚Äôs Role:**
{gov_b}

---
## 2. Strategy
*Disclosing the actual and potential impacts of climate-related risks and opportunities on the organization‚Äôs businesses, strategy, and financial planning.*

**a) Identified Risks and Opportunities:**
{strat_a}

**b) Impact on Business, Strategy, and Financial Planning:**
{strat_b}

**c) Resilience of Strategy (Scenario Analysis):**
{strat_c}

---
## 3. Risk Management
*Disclosing how the organization identifies, assesses, and manages climate-related risks.*

**a) Risk Identification and Assessment Processes:**
{risk_a}

**b) Risk Management Processes:**
{risk_b}

**c) Integration into Overall Risk Management:**
{risk_c}

---
## 4. Metrics and Targets
*Disclosing the metrics and targets used to assess and manage relevant climate-related risks and opportunities.*

**a) Metrics Used for Assessment:**
{metrics_a}

**b) Greenhouse Gas (GHG) Emissions:**
{metrics_b}
Key reported emissions data includes:
{metrics_text}

**c) Targets and Performance:**
{metrics_c}
"""
    return final_prompt
def generate_with_gamma(gamma_api_key, gamma_prompt, company_name):
    """–í—ã–∑—ã–≤–∞–µ—Ç Gamma API, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–π—Ç—ã PDF —Ñ–∞–π–ª–∞."""
    headers = {"X-API-KEY": gamma_api_key, "Content-Type": "application/json"}
    payload = {
        "inputText": gamma_prompt,
        "format": "document",
        "exportAs": "pdf",
        "textMode": "condense",
        "additionalInstructions": "It is critically important that all text fits neatly within the page boundaries. Adjust layouts or slightly condense the text on each page to prevent any overflow.",
        "themeName": "ESG_Anna",
        "textOptions": {"language": "en", "amount": "detailed"},
        "imageOptions": {"source": "aiGenerated", "style": "photorealistic, corporate, clean"},
        "cardOptions": {"dimensions": "a4"}
    }
    
    generation_endpoint = "https://public-api.gamma.app/v0.2/generations"
    
    response = requests.post(generation_endpoint, headers=headers, json=payload)
    response.raise_for_status()
    
    generation_data = response.json()
    generation_id = generation_data.get("generationId")
    if not generation_id:
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å 'generationId'. –û—Ç–≤–µ—Ç: {generation_data}")

    status_placeholder = st.empty()
    status_placeholder.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. ID –∑–∞–¥–∞—á–∏: {generation_id}. –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
    
    status_endpoint = f"https://public-api.gamma.app/v0.2/generations/{generation_id}"
    download_url = None

    for i in range(25): 

        status_placeholder.info(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º TCFD... –®–∞–≥ {i+1} –∏–∑ –º–∞–∫—Å–∏–º—É–º 25")
        
        status_response = requests.get(status_endpoint, headers=headers)
        status_response.raise_for_status()
        status_data = status_response.json()
        current_status = status_data.get("status")
        
        if current_status == "completed":
            download_url = status_data.get("exportUrl")
            if download_url:
                status_placeholder.success("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!")
                break
        elif current_status == "failed":
            raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –î–µ—Ç–∞–ª–∏: {status_data.get('error')}")
        time.sleep(10)

    if download_url:
        pdf_response = requests.get(download_url)
        pdf_response.raise_for_status()
        return pdf_response.content
    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞.")
        return None

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---

st.set_page_config(page_title="ESG Report Generator", layout="wide")
st.title("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä ESG-–æ—Ç—á–µ—Ç–æ–≤ (TCFD)")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ GRI (PDF + Excel), –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–ª—è –≤–∞—Å –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ TCFD.")

GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
GAMMA_API_KEY = os.environ.get("GAMMA_API_KEY")

if not (GEMINI_API_KEY and GAMMA_API_KEY):
    st.sidebar.warning("API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏. –í–≤–µ–¥–∏—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞.")
    GEMINI_API_KEY = st.sidebar.text_input("Gemini API Key", type="password")
    GAMMA_API_KEY = st.sidebar.text_input("Gamma API Key", type="password")

col1, col2 = st.columns(2)

with col1:
    company_name_input = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)", "Polyus PJSC")
    reporting_year_input = st.text_input("–û—Ç—á–µ—Ç–Ω—ã–π –≥–æ–¥", "2023")
    
with col2:
    pdf_file = st.file_uploader("1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF –æ—Ç—á–µ—Ç (GRI)", type="pdf")
    excel_file = st.file_uploader("2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Å –¥–∞–Ω–Ω—ã–º–∏ (GRI)", type="xlsx")

if 'generated_pdf' not in st.session_state:
    st.session_state.generated_pdf = None

if st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å TCFD –æ—Ç—á–µ—Ç", type="primary"):
    
    # 1: –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π PDF-—Ñ–∞–π–ª –∏ –∫–ª—é—á–∏
    if pdf_file and GEMINI_API_KEY and GAMMA_API_KEY:
        with st.spinner("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –º–∞–≥–∏—è... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."):
            
            # 2. –°–æ–∑–¥–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –±—ã–ª –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω Excel
            excel_provided = bool(excel_file)
            
            # 3. –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ PDF (—Ç–µ–∫—Å—Ç –∏, –≤–æ–∑–º–æ–∂–Ω–æ, —Ü–∏—Ñ—Ä—ã, –µ—Å–ª–∏ Excel –Ω–µ—Ç)
            all_pdf_data = extract_data_from_pdf(pdf_file, GEMINI_API_KEY, excel_provided)
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            quantitative = {}

            # 4. –†–µ—à–∞–µ–º, –æ—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if excel_provided:
                st.info("–ù–∞–π–¥–µ–Ω Excel —Ñ–∞–π–ª, –∏–∑–≤–ª–µ–∫–∞—é —Ç–æ—á–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
                # –ï—Å–ª–∏ –µ—Å—Ç—å Excel - –±–µ—Ä–µ–º —Ü–∏—Ñ—Ä—ã –∏–∑ –Ω–µ–≥–æ (–æ–Ω–∏ —Ç–æ—á–Ω–µ–µ)
                quantitative = extract_metrics_from_excel(excel_file)
            else:
                st.info("Excel —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é –¥–∞–Ω–Ω—ã–µ, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ PDF...")
                # –ï—Å–ª–∏ Excel –Ω–µ—Ç - –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å —Ü–∏—Ñ—Ä—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ Gemini
                quant_text = all_pdf_data.get('Quantitative Data (if available)', '')
                lines = quant_text.split('\n')
                for line in lines:
                    if "Scope 1" in line: quantitative["Scope 1 GHG Emissions"] = re.search(r'(\d+\.?\d*)', line).group(1) if re.search(r'(\d+\.?\d*)', line) else "Not available"
                    if "Scope 2" in line: quantitative["Scope 2 GHG Emissions"] = re.search(r'(\d+\.?\d*)', line).group(1) if re.search(r'(\d+\.?\d*)', line) else "Not available"

            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            if all_pdf_data:
                # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Gamma, –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                gamma_prompt = build_gamma_prompt(company_name_input, reporting_year_input, quantitative, all_pdf_data)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ Gamma
                pdf_bytes = generate_with_gamma(GAMMA_API_KEY, gamma_prompt)
                
                if pdf_bytes:
                    st.session_state.generated_pdf = pdf_bytes
    else:
        # –ï—Å–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π PDF-—Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF-—Ñ–∞–π–ª –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
        
if st.session_state.generated_pdf:
    st.success("üéâ –í–∞—à –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!")
    sanitized_company_name = re.sub(r'[<>:"/\\|?*¬´¬ª]', '', company_name_input).replace(' ', '_')
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å TCFD –æ—Ç—á–µ—Ç (PDF)",
        data=st.session_state.generated_pdf,
        file_name=f"TCFD_Report_{sanitized_company_name}.pdf",
        mime="application/pdf"

    )
